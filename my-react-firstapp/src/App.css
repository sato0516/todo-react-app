/* １変数セット 
:root でCSS全体で使える変数を定義。どのクラスからでも var(--名前) で呼び出せる。*/
:root {
  --bg: #f6f8fc;               /* 背景色（ページ全体） */
  --card: #ffffff;             /* カード部分の背景色 */
  --text: #111827;              /* メイン文字色 */
  --muted: #6b7280;             /* 薄い文字色（完了タスクなど） */
  --accent: #3b82f6;            /* ボタンやリンクのアクセント色 */
  --radius: 12px;               /*  角を丸くするための半径の値※50％で完全な円 */
  --shadow: 0 8px 24px rgba(0,0,0,.08); /* カードやボタンの影 */
  --gap: 12px;                  /* 要素間の基本余白 */
  --transition: 160ms ease;     /* hover（ユーザーがマウスカーソルをその要素の上に置いたときに適用される状態）などのアニメーション速度と動き */
}

/* 全体の背景やフォント設定,画面上の配置*/
body {
  display: flex;
  justify-content: center; /* 横方向中央寄せ */
  align-items: center; /*centerで中央寄せ */
  background: #f7f9fc;
}

/* アプリ全体の横幅や余白設定 */
.app {
  max-width: 560px; /* 横幅を固定して中央寄せ */
  margin: 48px auto; /* 上下48px、左右は自動で中央 */
  padding: 0 16px;   /* 左右の余白 */
  color: var(--text); /* テキスト色は変数から */
}

/* カード枠（タスクリスト全体を囲む部分） */
.card {
  background: var(--card);        /* 背景色 */
  border-radius: var(--radius);   /* 角丸 */
  box-shadow: var(--shadow);      /* 影 */
  padding: 20px 30px;              /* 内側余白 */
}

/* ③ 入力フォーム */
.form {
  display: flex;
  gap: var(--gap);
  margin-top: 8px;
}
.form input[type="text"] {
  flex: 1;
  padding: 10px 12px;
  border: 1px solid #e5e7eb;           /* 薄いグレーの枠 */
  border-radius: 10px;
  background: #fff;
  color: var(--text);
  font-size: 16px;
  outline: none;                        /* デフォの青い枠を消す */
  transition: var(--transition);
}
.form button {
  padding: 10px 14px;
  border: 0;
  border-radius: 10px;
  background: var(--accent);
  color: #fff;
  font-weight: 600;
  cursor: pointer;
  transition: var(--transition);
  white-space: nowrap;                   /* 文字折り返し防止 */
}
/*▼ 擬似クラス ある条件（hover時など）の時だけ適用するスタイル。基本スタイルと条件付きスタイルは別のセレクタとして書く */
.form button:hover {
  opacity: .92;
  transform: translateY(-1px);
}
.form button:active {
  transform: translateY(0);
}
.form button:disabled {
  opacity: .5;
  cursor: not-allowed;
} 

/* ④ タスク一覧 */
.taskList {
  list-style: none;
  padding: 0;
  margin: 16px 0 0;
}
.taskItem {
  display: flex;
  align-items: center;
  gap: var(--gap);
  padding: 10px 8px;
  border-bottom: 1px solid #f1f5f9;
  transition: var(--transition);
}
/*:last-child → 親要素（ここでは <ul>）の中で最後の子要素だけに適用する擬似クラス*/
.taskItem:last-child {
  border-bottom: 0;
}
/* 本文は残り幅いっぱいに広げる */
.taskText {
  flex: 1;
  line-height: 1.6;
}
/* 完了タスクの見た目（取り消し線＋色を薄く）※クラス名taskItem isDoneに対して、CSSは.isDoneでいいの？→「クラス名が isDone の要素にマッチする」という意味なのでOK。※今回は 「isDone クラスを持つ要素の中にある .taskText 要素」に適用、という意味*/
.isDone .taskText {
  color: var(--muted);
  text-decoration: line-through;
}

/* チェックボックスのフォーカスがわかるように（アクセシビリティ） */
.taskItem input[type="checkbox"]:focus-visible {
  outline: 2px solid var(--accent);
  outline-offset: 2px;
}

/* ⑤ アイコンボタン */
.iconButton {
  background: transparent; /* 背景透明 */
  border: none;            /* 枠線なし */
  cursor: pointer;         /* マウスを当てたらポインター */
  padding: 4px;            /* アイコン周りの余白 */
  border-radius: 4px;      /* 少し角丸 */
}
.iconButton:hover {
  background-color: rgba(0, 0, 0, 0.05); /* 薄い背景色 */
}
/*.iconButton クラスが付いた要素の中にある imgタグ と svgタグ の両方に同じスタイルを適用しておくと、削除ボタンが 画像アイコン でも SVGアイコン でも同じ見た目に統一できる*/
.iconButton img,
.iconButton svg {
  width: 20px;
  height: 20px;
  vertical-align: middle;
}

/*日付の追加による追記*/
.taskContent {
  display: flex;
  flex-direction: row; /* 縦に並べる */
}

.dueDate {
  color: #666;
  margin-left: 10px;
  line-height: 1.6;  /* textと高さを合わせる */
  white-space: nowrap;     /* 日付が折り返されないように */
}

.due--none    { color: #6b7280; } /* 期限なし */
.due--overdue { color: #dc2626; } /* 期限超過 */
.due--today   { color: #ea580c; } /* 今日 */
.due--soon    { color: #f59e0b; } /* 3日以内 */
.due--week    { color: #16a34a; } /* 1週間以内 */
.due--later   { color: #374151; } /* 余裕あり */

/* 完了タスクの見た目（タスク名＋期日どちらも） */
.taskItem.isDone .taskText,
.taskItem.isDone .dueDate {
  color: var(--muted, #9ca3af);   /* 既存の --muted を使用。未定義なら薄グレー */
  text-decoration: line-through;  /* 取り消し線 */
  opacity: .75;                   /* ほんのり薄く（お好みで調整 or 削除） */
  transition: color .2s ease, opacity .2s ease;
}



/*作成メモ
＊まずは土台となるA案を作成→難易度あげてD案挑戦してみる。
＊設計としては　CSS変数＋テーマクラスで進行。
　ファイルは最初は1枚でOK。3テーマ以上になったらApp.css（共通） / theme-minimal.css / theme-pastel.css に分離するとよいらしい。
　余裕が出たら、トークンをtokens.cssへ切り出すと拡張に強くなります？？？

＊どこから書くか：セクションごとに書く
１ A案用変数セット（:root）
２ 共通ベース（body, .app, .card）
３入力フォーム部分（.form〜）
４タスク一覧部分（.taskList〜）
５アイコンボタン（.iconBtn）

◆A案
 Minimal Card（白＋アクセント1色）
雰囲気：シンプル・読みやすい・ビジネス寄り
配色：#111 / #666 / #F5F7FB / アクセント #3B82F6
特徴：カードにやわらかい影、角丸12–16px、余白ゆったり。
UI：チェック済は淡グレー＋取り消し線、削除はアイコンボタン。
おすすめ：まずはここから。失敗しづらく保守もしやすい。

◆D案
Pastel Sticky Notes（付箋風）
雰囲気：親しみ・ノート感・学習用に◎
配色：パステル3色（例：ミント/コーラル/ラベンダー）
特徴：各タスクが付箋カード、完了で色が淡く変化。
UI：削除は右上×、ドラッグで並べ替えに拡張もしやすい。
*/